// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* The original script is slightly changed to be able to it use in the implementation */
clear;

p:=2^372*3^239-1;
Fp:=GF(p);
Fp2<i>:=ExtensionField<Fp,x|x^2+1>;
poly<x>:=PolynomialRing(Fp2);

K := [
     	[	Fp!964830035092766785517914396185546056142254919889948968973942228460405585822659195227299554584257536143693791429594490696809006406358702341831567323740191092400574842546494940318793361007693369076975862815525041503390891452191, 
    		Fp!2630906077131410915970519216323700999089683531277538935432983054104316678474041672854283508929426450900452751315817869246772816788366265967442417525789077949872833791641366549734193474414911203977512647849846316855292823725648,     
    		Fp!4336892320405793250672479572215079663969022964466542092818368806565920615210740902937641427943016247687197425495993842572719597162037069004317047942594240925966530462025337296690174265480187464215505970173011277074377314067877 ],    
    	[	Fp!870195167958202428441014890573730157258786793463347603554494201705097799734001147155404380075243092811136549405136929287603317235080909961123141215869340030643499823223286012592120964872755589377128182630174314677558011702846,     
    		Fp!1760710909173208487529504325749970841830896737814191331878488852399218878740040525698879128854183358089316201910680939959169499553285356006319276309919737919229333968418080537142072509542155614600384465219672002177734812022802, 
    		Fp!1, Fp!1 ],    
    	[	Fp!1760710909173208487529504325749970841830896737814191331878488852399218878740040525698879128854183358089316201910680939959169499553285356006319276309919737919229333968418080537142072509542155614600384465219672002177734812022802,     
    		Fp!870195167958202428441014890573730157258786793463347603554494201705097799734001147155404380075243092811136549405136929287603317235080909961123141215869340030643499823223286012592120964872755589377128182630174314677558011702846,     
    		Fp!1247042482530207573563811851992817760996459583677364093360236328180419129628578472488496827115978165501602730798825871451905070805202370975274381888193938815296929738799733384706006997853078505270552587401384860290186727392596,     
    		Fp!1247042482530207573563811851992817760996459583677364093360236328180419129628578472488496827115978165501602730798825871451905070805202370975274381888193938815296929738799733384706006997853078505270552587401384860290186727392596 ],    
    	[	Fp!3288950114064010507190107044168421405383402703953759524021978250436040436710969548841222751755713290830357562527925073414484971340682021222023746786410180942165630335912364873150636486286825501325750460071258117953894081103356,     
    		Fp!3693822484692598220789859091962915984659703855336924926987020527613423871858610416342172388433994386856399101243244918352303973274965271216877364117248070173399330285159417780990976341618879950725797416363851750228140137139870,     
    		Fp!6535292675518427995172002904555662911264611487984267655551505726991842578427237157957240457745637778554784176327317857829149972458881979629927823014776662242322544420063144194651870857567902352865502544095726499122605071156559,     
    		Fp!6535292675518427995172002904555662911264611487984267655551505726991842578427237157957240457745637778554784176327317857829149972458881979629927823014776662242322544420063144194651870857567902352865502544095726499122605071156559 ]
	 ];

P := [ 	Fp!5738004633791624399951134807287794482883762420727695567167189843554335109166277619811568740510613809456376586327992727148590023757897656560298432214110958487784975753250251888505161918808192811263153897769712642459889376431098, 
		Fp!6321011042285346099457448120630970117152810997390500453410595659256538052117655031084502691722877258012717611239286011510313374347584969721442470136959940385666706417063293438149232632522148265275544911996632891676372508995267, 
		Fp!2043243509957269292468667272314250502648579177261754208190844542173250300278955482833827139292451487268781742710550643080040396151525085589531886902933503043530535440985227986306286287004945120239653470650470605160921127338458, 
		Fp!1 ];

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

H:=function(P);

	/*

	The 4-way Hadamard transform

	INPUTS: - A tuple of four projective field elements [x,y,z,t]
	OUTPUTS: - The Hadamard transform [x+y+z+t,x+y-z-t,x-y+z-t,x-y-z+t]		

	*/

	T1:=P[1]+P[2]; T2:=P[3]+P[4]; T3:=P[1]-P[2]; T4:=P[3]-P[4];

	return [T1+T2,T1-T2,T3+T4,T3-T4];

end function;

S:=function(P);

	/*

	The 4-way squaring

	INPUTS: - A tuple of four projective field elements [x,y,z,t]
	OUTPUTS: - The coordinate-wise squarings [x^2,y^2,z^2,t^2]		

	*/

	return [P[1]^2,P[2]^2,P[3]^2,P[4]^2];

end function;

C:=function(V,W)

	/*

	The 4-way coordinate-wise multiplication of 2 tuples

	INPUTS: - Two tuples of four projective field elements
	OUTPUTS: - One 4-tuple of their coordinate-wise products	

	*/

	return [V[1]*W[1],V[2]*W[2],V[3]*W[3],V[4]*W[4]];

end function;

Invert4Constants:=function(P)

	/*

	The 4-way inversion in projective 3-space

	INPUTS: - One tuple of 4-elements in P^3 
	OUTPUTS: - A tuple of elements projectively equivalent to their inverses

	*/

	pi1:=P[3]*P[4];
	pi2:=pi1*P[1];
	pi1:=pi1*P[2];
	pi3:=P[1]*P[2];
	pi4:=pi3*P[3];
	pi3:=pi3*P[4];

	return [pi1,pi2,pi3,pi4];

end function;

KummerConstantsFromSquaredThetas:=function(P)
	
	/*

	Computes the Kummer surface constants used in the DBL and DBLADD functions

	INPUTS: - the 4 squared theta constants [mu1,mu2,mu3,mu4]
	OUTPUTS: - the first tuple is projectively equivalent to [1/mu1: 1/mu2: 1/mu3: 1/mu4]
			 - the second tuple is projectively equivalent to [1/mu1h: 1/mu2h: 1/mu3h: 1/mu4h], 
			 where the mujh are the j-th component of the Hadamard transform of [mu1,mu2,mu3,mu4]

	*/
	
	return Invert4Constants(P),Invert4Constants(H(P));

end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

SquaredKummerFromSquaredThetas:=function(thetas)
	
	/*

	Computes all of the Kummer surface constants

	INPUTS: - the 4 squared theta constants [mu1,mu2,mu3,mu4]
	OUTPUTS: - K1: [K_F,K_G,K_H], which define a Kummer surface (see Section 5)
			 - K2: [mu1,mu2,mu3,mu4], the unchanged input, but part of the full description of a Kummer
			 - K3, K4: the two 4-tuples of projective constants needed in the DBL and DBLADD routines
	*/
	
	mu1:=thetas[1]; mu2:=thetas[2]; mu3:=thetas[3]; mu4:=thetas[4];

	K_F:=(mu1+mu2+mu3+mu4)*(mu1+mu2-mu3-mu4)*(mu1-mu2+mu3-mu4)*(mu1-mu2-mu3+mu4);
	K_F:=K_F/(mu1*mu4-mu2*mu3)/(mu1*mu3-mu2*mu4)/(mu1*mu2-mu3*mu4);
	K_G:=(mu1^2-mu2^2-mu3^2+mu4^2)/(mu1*mu4-mu2*mu3);
	assert K_G eq (mu1^2-mu2^2+mu3^2-mu4^2)/(mu1*mu3-mu2*mu4);
	K_H:=(mu1^2+mu2^2-mu3^2-mu4^2)/(mu1*mu2-mu3*mu4);
	K_F:=4*K_F^2*mu1*mu2*mu3*mu4;

	K1:=[K_F,K_G,K_H];
	K2:=thetas;
	K3,K4:=KummerConstantsFromSquaredThetas(thetas);

	return [K1,K2,K3,K4];

end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

OnKummer:=function(P,K)

	/*

	Checks if a given point is on a given Kummer surface.

	INPUTS: - P: Point in P^3, represented as a 4-tuple
 			- K: Kummer surface
	OUTPUT: - boolean: true if P lies on K, false otherwise

	*/

	return 
		K[1][1]*(P[1]*P[2]*P[3]*P[4])
		eq
		(
		(P[1]^2+P[2]^2+P[3]^2+P[4]^2)
		-K[1][2]*(P[1]+P[2])*(P[3]+P[4])
		-K[1][3]*(P[1]*P[2]+P[3]*P[4])
		)^2;

end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

DBL:=function(P,K);

	/*

	(Pseudo-)doubling of a Kummer point

	INPUTS: - P: Point in P^3, represented as a 4-tuple, lying on...
 			- K: Kummer surface
	OUTPUT: - [2]P 

	*/

	P:=H(P);
	P:=S(P);
	P:=C(P,K[4]);
	P:=H(P);
	P:=S(P);
	P:=C(P,K[3]);

	if OnKummer(P,K) then
		return P;
	else
		return "somethings wrong";
	end if;
	
end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

eDBLs:=function(P,K,e);

	/*

	Repeated (Pseudo-)doublings of a Kummer point

	INPUTS: - P: Point in P^3, represented as a 4-tuple, lying on...
 			- K: Kummer surface
 			- e: an integer
	OUTPUT: - [2^e]P 
	
	*/

	for j:=1 to e do
		P:=DBL(P,K);
	end for;

	if OnKummer(P,K) then
		return P;
	else
		return "somethings wrong";
	end if;
	
end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

IsogenousSquaredThetasFromTorsionKernel:=function(P2,P4)
	/*

	Given a special point of order 2 and a point of order 4 lying above it, this function computes the squared theta constants of the image Kummer surface corresponding to the kernel specified by the torsion points (see the paper), as well as constants used to compute the image of any point under the associated isogeny.

	INPUTS: - P2: a Kummer point of order 2 in one of the two (2,2)-subgroups of interest
			- P4: a Kummer point of order 4 such that P2=[2]P4 on K
	OUTPUT: - mus: a 4-tuple of the squared theta coordinates of the image Kummer
			- pis: some constants used in the isogeny evaluation (next) function, i.e., in the special scaling C. See the paper.
	*/

	HP2:=H(P2); HP4:=H(P4); //save on H(P2)

	assert P2[3] ne 0;

	pi1:=HP2[2]*HP4[3];
	pi2:=HP4[3]*HP2[1];
	pi3:=HP2[2]*HP4[1]; 
	pi4:=pi3;

	pis:=[pi1,pi2,pi3,pi4];
	mus:=C(HP2,pis);
	mus:=H(mus);
	mus:=S(mus);

	return mus,pis;
end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

IsogenyKummerPoint:=function(Q,pis)

	/*

	Evaluating the (2,2) isogeny from the above function on a general point on the domain Kummer. 

	INPUTS: - Q: any non-kernel point on a given Kummer K
	OUTPUT: - varphi(Q): the image of varphi on Qs

	*/

	Q:=H(Q);
	Q:=C(Q,pis);
	Q:=H(Q);
	Q:=S(Q);

	return Q;

end function;

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////

/*
In what follows we perform a simple scalar-multiplication-based loop to compute a chain of Richelot isogenies on Kummers. We move the input point P through subsequent isogenies and illustrate its order being decreased by a factor of 2 each time. We also push a random point Q through the isogenies. 

This is merely to illustrate that the Kummer approach is compatible with state-of-the-art SIDH implementations. Of course, a real implementation would avoid various checks/normalizations, would work out an optimal binary-tree strategy for the main loop, etc.

See the paper for more details. 
*/

for l:=371 to 3 by -1 do
	P4:=eDBLs(P,K,l-2);
	P2:=DBL(P4,K);
	mus,pis:=IsogenousSquaredThetasFromTorsionKernel(P2,P4);
	P:=IsogenyKummerPoint(P,pis);
	K:=SquaredKummerFromSquaredThetas(mus);
	assert OnKummer(P,K);
end for;
P;

